pipeline{
    agent {
            label 'agent-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select Action')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }
    stages {
        stage('Init and plan') {
            steps {
                withAWS(region:'us-east-1', credentials :'AWS-CREDS') {
                    sh  """
                        cd 10-sg 
                        terraform init --reconfigure
                        terraform plan -out=tfplan
                    """
            }
        }
        }
                
        stage('Apply or Destroy') {
             /* input {
                message "Should we continue to ${params.ACTION}"
                ok "Yes, we should."
            }  */
             steps {
                withAWS(region: 'us-east-1', credentials: 'AWS-CREDS') {
                    sh """
                        cd 10-sg
                        if [ ${params.ACTION} == 'apply' ]
                        then
                            terraform apply -auto-approve tfplan
                        elif [ ${params.ACTION} == 'destroy' ]
                        then
                            terraform destroy -auto-approve
                        fi
                    """
            }
                    }

        }
        stage ('Destroy VPC') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps{
                build job: '00-vpc', parameters: [string(name: 'ACTION', value: "destroy")], wait: false
            }
        }
        stage('Parallel') {
            when {
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('Bastion') {
                    steps {
                        build job: '20-bastion', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('RDS') {
                    steps {
                        build job: '30-rds', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('EKS') {
                    steps {
                        build job: '40-eks', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('ECR') {
                    steps {
                        build job: '70-ecr', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
              
                     }
        }
        stage('Sequential') {
            when {
                expression { params.ACTION == 'apply' }
            }
            stages {
                stage('ACM') {
                    steps {
                        build job: '50-acm', parameters: [string(name: 'ACTION', value: "apply")]
                    }
                }
                stage('ALB') {
                    steps {
                        build job: '60-alb', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('CDN') {
                    steps {
                        build job: '80-cdn', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
    }
    }
    post {
        always {
            echo " this section runs always"
            deleteDir()
        }
        success {
            echo " this section run when pipeline is success"
        }
        failure {
            echo " this section run when pipeline is failure"
        }
    }
}
